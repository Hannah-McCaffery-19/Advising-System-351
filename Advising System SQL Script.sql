-- MySQL Script generated by MySQL Workbench
-- Tue Feb  8 19:49:17 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Faculty`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Faculty` (
  `first name` VARCHAR(45) NOT NULL,
  `last name` VARCHAR(45) NOT NULL,
  `faculty phone` VARCHAR(45) NOT NULL,
  `faculty email` VARCHAR(45) NOT NULL,
  `salary` VARCHAR(45) NULL,
  `faculty address` VARCHAR(70) NULL,
  `role` VARCHAR(45) NULL,
  `faculty ID` INT NOT NULL,
  PRIMARY KEY (`faculty ID`));


-- -----------------------------------------------------
-- Table `mydb`.`Class`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Class` (
  `class ID` INT NOT NULL,
  `class location` VARCHAR(45) NULL,
  `semester` VARCHAR(45) NULL,
  `Room Number` INT NULL,
  `Building Name` VARCHAR(45) NULL,
  `faculty ID` VARCHAR(45) NULL,
  `prefix` VARCHAR(45) NULL,
  `course number` INT NOT NULL,
  `Faculty_faculty ID` INT NOT NULL,
  PRIMARY KEY (`class ID`),
  INDEX `fk_Class_Faculty1_idx` (`Faculty_faculty ID` ASC),
  CONSTRAINT `fk_Class_Faculty1`
    FOREIGN KEY (`Faculty_faculty ID`)
    REFERENCES `mydb`.`Faculty` (`faculty ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Location`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Location` (
  `Room Number` INT NOT NULL,
  `Building Name` INT NOT NULL,
  `Class_class ID` INT NOT NULL,
  PRIMARY KEY (`Room Number`, `Building Name`),
  INDEX `fk_Location_Class1_idx` (`Class_class ID` ASC),
  CONSTRAINT `fk_Location_Class1`
    FOREIGN KEY (`Class_class ID`)
    REFERENCES `mydb`.`Class` (`class ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`General Course Listing`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`General Course Listing` (
  `prefix` INT NOT NULL,
  `course number` INT NOT NULL,
  `course description` TEXT(500) NULL,
  `pre-requisite` VARCHAR(45) NULL,
  `co-requisite` VARCHAR(45) NULL,
  `restrictions` VARCHAR(45) NULL,
  `semester` VARCHAR(45) NULL,
  `department` VARCHAR(45) NULL,
  `class name` VARCHAR(60) NULL,
  `Class_class ID` INT NOT NULL,
  PRIMARY KEY (`prefix`, `course number`),
  INDEX `fk_General Course Listing_Class1_idx` (`Class_class ID` ASC),
  CONSTRAINT `fk_General Course Listing_Class1`
    FOREIGN KEY (`Class_class ID`)
    REFERENCES `mydb`.`Class` (`class ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Student`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Student` (
  `student ID` INT NOT NULL,
  `last name` VARCHAR(45) NULL,
  `first name` VARCHAR(45) NULL,
  `address` VARCHAR(45) NULL,
  `phone number` VARCHAR(45) NULL,
  `student email` VARCHAR(45) NULL,
  `year enrolled` DATE NULL,
  `graduation year` DATE NULL,
  `student alternative PIN` VARCHAR(45) NULL,
  `evaluation grade` VARCHAR(1) NULL,
  `accumulated credits` INT NULL,
  `pin number` VARCHAR(10) NULL,
  `Faculty_faculty ID` INT NOT NULL,
  PRIMARY KEY (`student ID`),
  INDEX `fk_Student_Faculty_idx` (`Faculty_faculty ID` ASC),
  CONSTRAINT `fk_Student_Faculty`
    FOREIGN KEY (`Faculty_faculty ID`)
    REFERENCES `mydb`.`Faculty` (`faculty ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`enrollment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`enrollment` (
  `class ID` INT NOT NULL,
  `student ID` INT NOT NULL,
  `enrollment date` DATE NULL,
  `Class_class ID` INT NOT NULL,
  `Student_student ID` INT NOT NULL,
  PRIMARY KEY (`class ID`, `student ID`),
  INDEX `fk_enrollment_Class1_idx` (`Class_class ID` ASC),
  INDEX `fk_enrollment_Student1_idx` (`Student_student ID` ASC),
  CONSTRAINT `fk_enrollment_Class1`
    FOREIGN KEY (`Class_class ID`)
    REFERENCES `mydb`.`Class` (`class ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_enrollment_Student1`
    FOREIGN KEY (`Student_student ID`)
    REFERENCES `mydb`.`Student` (`student ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Override`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Override` (
  `Override ID` INT NOT NULL,
  `override status` VARCHAR(45) NULL,
  `override time` VARCHAR(45) NULL,
  `student ID` INT NULL,
  `faculty ID` INT NULL,
  `Student_student ID` INT NOT NULL,
  `Faculty_faculty ID` INT NOT NULL,
  PRIMARY KEY (`Override ID`),
  INDEX `fk_Override_Student1_idx` (`Student_student ID` ASC),
  INDEX `fk_Override_Faculty1_idx` (`Faculty_faculty ID` ASC),
  CONSTRAINT `fk_Override_Student1`
    FOREIGN KEY (`Student_student ID`)
    REFERENCES `mydb`.`Student` (`student ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Override_Faculty1`
    FOREIGN KEY (`Faculty_faculty ID`)
    REFERENCES `mydb`.`Faculty` (`faculty ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Declared Minor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Declared Minor` (
  `minor ID` INT NOT NULL,
  `student ID` INT NOT NULL,
  `Declared Minor Date` DATE NULL,
  `minor name` VARCHAR(45) NULL,
  `Student_student ID` INT NOT NULL,
  PRIMARY KEY (`minor ID`, `student ID`),
  INDEX `fk_Declared Minor_Student1_idx` (`Student_student ID` ASC),
  CONSTRAINT `fk_Declared Minor_Student1`
    FOREIGN KEY (`Student_student ID`)
    REFERENCES `mydb`.`Student` (`student ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Declared Major`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Declared Major` (
  `major ID` INT NOT NULL,
  `studentID` INT NOT NULL,
  `declare major` DATE NULL,
  `major name` VARCHAR(45) NULL,
  `Student_student ID` INT NOT NULL,
  PRIMARY KEY (`major ID`, `studentID`),
  INDEX `fk_Declared Major_Student1_idx` (`Student_student ID` ASC),
  CONSTRAINT `fk_Declared Major_Student1`
    FOREIGN KEY (`Student_student ID`)
    REFERENCES `mydb`.`Student` (`student ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Meeting`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Meeting` (
  `meeting ID` INT NOT NULL,
  `location` VARCHAR(45) NULL,
  `time` DATE NULL,
  `student ID` INT NULL,
  `faculty ID` INT NULL,
  `Student_student ID` INT NOT NULL,
  `Faculty_faculty ID` INT NOT NULL,
  PRIMARY KEY (`meeting ID`),
  INDEX `fk_Meeting_Student1_idx` (`Student_student ID` ASC),
  INDEX `fk_Meeting_Faculty1_idx` (`Faculty_faculty ID` ASC),
  CONSTRAINT `fk_Meeting_Student1`
    FOREIGN KEY (`Student_student ID`)
    REFERENCES `mydb`.`Student` (`student ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Meeting_Faculty1`
    FOREIGN KEY (`Faculty_faculty ID`)
    REFERENCES `mydb`.`Faculty` (`faculty ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Sending PIN`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Sending PIN` (
  `faculty ID` INT NOT NULL,
  `student ID` INT NOT NULL,
  `status` VARCHAR(45) NULL,
  `Faculty_faculty ID` INT NOT NULL,
  `Student_student ID` INT NOT NULL,
  PRIMARY KEY (`faculty ID`, `student ID`),
  INDEX `fk_Sending PIN_Faculty1_idx` (`Faculty_faculty ID` ASC),
  INDEX `fk_Sending PIN_Student1_idx` (`Student_student ID` ASC),
  CONSTRAINT `fk_Sending PIN_Faculty1`
    FOREIGN KEY (`Faculty_faculty ID`)
    REFERENCES `mydb`.`Faculty` (`faculty ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Sending PIN_Student1`
    FOREIGN KEY (`Student_student ID`)
    REFERENCES `mydb`.`Student` (`student ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Assigned Advising`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Assigned Advising` (
  `student ID` INT NOT NULL,
  `faculty ID` INT NOT NULL,
  `Faculty_faculty ID` INT NOT NULL,
  `Student_student ID` INT NOT NULL,
  PRIMARY KEY (`student ID`, `faculty ID`),
  INDEX `fk_Assigned Advising_Faculty1_idx` (`Faculty_faculty ID` ASC),
  INDEX `fk_Assigned Advising_Student1_idx` (`Student_student ID` ASC),
  CONSTRAINT `fk_Assigned Advising_Faculty1`
    FOREIGN KEY (`Faculty_faculty ID`)
    REFERENCES `mydb`.`Faculty` (`faculty ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Assigned Advising_Student1`
    FOREIGN KEY (`Student_student ID`)
    REFERENCES `mydb`.`Student` (`student ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Department` (
  `department ID` INT NOT NULL,
  `department name` VARCHAR(45) NULL,
  PRIMARY KEY (`department ID`));


-- -----------------------------------------------------
-- Table `mydb`.`Employing`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Employing` (
  `department ID` INT NOT NULL,
  `faculty ID` INT NOT NULL,
  `Department_department ID` INT NOT NULL,
  `Faculty_faculty ID` INT NOT NULL,
  PRIMARY KEY (`department ID`, `faculty ID`),
  INDEX `fk_Employing_Department1_idx` (`Department_department ID` ASC),
  INDEX `fk_Employing_Faculty1_idx` (`Faculty_faculty ID` ASC),
  CONSTRAINT `fk_Employing_Department1`
    FOREIGN KEY (`Department_department ID`)
    REFERENCES `mydb`.`Department` (`department ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Employing_Faculty1`
    FOREIGN KEY (`Faculty_faculty ID`)
    REFERENCES `mydb`.`Faculty` (`faculty ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
